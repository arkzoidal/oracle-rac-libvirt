- name: oracle-gi-install-role | unzip_tfa_software. | Check that the cvu pack zip file exists
  stat:
    path: "{{ gv_guest_staging_dir }}/{{ rv_ahf_zip_file }}"
  register: stat_result

- name: oracle-gi-install-role | unzip_tfa_software.| copy AHF zip file to the target database server
  copy: src={{ v_host_staging_dir }}/{{ rv_ahf_zip_file }} dest={{ gv_guest_staging_dir }} owner=root group=root mode=0775 force=no
  when: inventory_hostname in gv_cluster_first_node and not stat_result.stat.exists

- name: oracle-gi-install-role | unzip_tfa_software | Creates directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0775
    recurse: yes
  with_items:
    - "{{ gv_haf_tmp_dir }}"
    - "{{ gv_haf_loc_dir }}"
    - "{{ gv_haf_data_dir }}"

- name: oracle-gi-install-role | unzip_tfa_software | Unpack Oracle 19c GI Software
  when: inventory_hostname in gv_cluster_first_node
  become: yes
  remote_user: "{{ gv_root_user }}"
  become: yes
  become_method: sudo
  become_user: "{{ gv_root_user }}"
  unarchive:
    src="{{ gv_guest_staging_dir }}/{{ rv_ahf_zip_file }}"
    dest="{{ gv_haf_tmp_dir }}"
    remote_src=yes
    mode=0775
    group="root"
    owner="root"

- name: oracle-gi-install-role | run_execute_config_tools | Create install/execute_config_tools.sh
  when: ansible_hostname == gv_cluster_first_node
  remote_user: "{{ gv_root_user }}"
  become: yes
  become_method: sudo
  become_user: "{{ gv_root_user }}"
  template:
     src: install_hfa.j2
     dest: "{{ gv_haf_tmp_dir }}/run_tfa.sh"
     owner: "{{ gv_grid_user }}"
     group: "{{ gv_oracle_install_group }}"
     mode: u=rwx,g=rx,o=r

- name: oracle-gi-install-role | unzip_tfa_software | Check if {{ gv_oracle_home_db }} folder is empty before proceeding
  find:
    paths: "{{ gv_haf_tmp_dir }}/"
  register: filesFound
