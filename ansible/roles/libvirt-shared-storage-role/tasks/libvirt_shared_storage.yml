---
# tasks file for provision/ansible/roles/libvirt_shared_storage
#virsh pool-create-as --type dir --name orarac --target /data2/virtpool/orarac
#virsh vol-create-as --pool orarac --name orarac01.raw --capacity 200G --allocation 20G --format raw
#virsh vol-create-as --pool orarac --name orarac02.raw --capacity 200G --allocation 20G --format raw

- name: Get Pool Info
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell:
    cmd: "virsh pool-info {{ gv_shared_pool }}"
  register: pool_info_contents
  ignore_errors: yes

- name: check directory exists
  delegate_to: localhost
  run_once: true
  stat:
     path: "{{ gv_libvirt_dir }}/{{ gv_shared_pool }}"
  register: pool_dir

- name: Create pool directory
  delegate_to: localhost
  run_once: true
  ansible.builtin.file:
    path: "{{ gv_libvirt_dir }}/{{ gv_shared_pool }}"
    state: directory
  when: pool_dir.stat.exists == false

- name: Message if pool does not exist
  delegate_to: localhost
  run_once: true
  ansible.builtin.debug:
     msg: "pool {{ gv_shared_pool }} not found"
  when: pool_info_contents.stdout == ""

- name: Create Libvirt Shared Pool 
  delegate_to: localhost
  run_once: true
  shell: >
          virsh pool-define-as {{ gv_shared_pool }} dir - - - - "{{ gv_libvirt_dir }}/{{ gv_shared_pool }}"
  when: pool_info_contents.stdout.find('UUID') == -1

- name: Get Pool Info
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell:
    cmd: "virsh pool-info {{ gv_shared_pool }}"
  register: pool_info_contents
  ignore_errors: yes

- name: Start the storage pool
  delegate_to: localhost
  run_once: true
  shell: >
          virsh pool-start {{ gv_shared_pool }}
  when: pool_info_contents.stdout.find('UUID') != -1 and pool_info_contents.stdout.find('running') == -1

- name: Set storage pool Autostart
  delegate_to: localhost
  run_once: true
  shell: >
          virsh pool-autostart {{ gv_shared_pool }}
  when: pool_info_contents.stdout.find('UUID') != -1

- name: Get Shared Pool Vol Info
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell:
    cmd: "virsh vol-list {{ gv_shared_pool }} | awk 'NR>2' | awk '{ print $1 }' "
  register: vol_info
  ignore_errors: yes

#- name: Get Shared Pool Vol Info
#  delegate_to: localhost
#  run_once: "{{ gv_cluster_first_node }}"
#  shell: "echo {{ item }}"
#  with_items: "{{ vol_info.stdout_lines }}"

- name: Set facts
  delegate_to: localhost
  run_once: true
  set_fact:
    tmp_disk:
      name: "{{ item }}"
  with_items: "{{  vol_info.stdout_lines }}"
  register: tmp_disk

- name: Prints tmp_disk.results as a list
  delegate_to: localhost
  run_once: true
  ansible.builtin.debug:
    msg:
    - "{{ tmp_disk.results | map(attribute='ansible_facts.tmp_disk') | list }}"

#- meta: end_play

- name: Create Shared disks in pool
  delegate_to: localhost
  run_once: true
  shell: >
          test -f {{ gv_libvirt_dir }}/{{ gv_shared_pool }}/{{ item.basename }}.raw || virsh vol-create-as --pool {{ gv_shared_pool }} --name {{ item.basename }}.raw --capacity {{ item.size }} --allocation {{ item.size }} --format raw
  with_items: '{{ gv_shared_disks }}'
  when: pool_info_contents.stdout.find('UUID') != -1
  ignore_errors: yes

#- meta: end_play

- name: Attach Shared disks to Guest
  delegate_to: localhost
  shell: >
          virsh attach-disk {{ hv_virtdomain_name }} {{ gv_libvirt_dir }}/{{ gv_shared_pool }}/{{ item.basename }}.raw  {{ item.device }} --persistent  --subdriver=raw --serial {{ item.serial }} --targetbus {{ item.bus }} --mode {{ item.mode }} --cache {{ item.cache }} --wwn {{ item.wwn }}
  with_items: 
    - '{{ gv_shared_disks }}'
  when: pool_info_contents.stdout.find('UUID') != -1
